# HQMX Backend CI/CD Pipeline

name: Deploy HQMX Backend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: hqmx-backend

jobs:
  # 코드 품질 검사
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps || npm install --legacy-peer-deps
      
    - name: Run ESLint
      run: npm run lint || true
      
    - name: Run tests
      run: npm test || echo "No tests found, continuing..."
      
    - name: Build TypeScript
      run: npm run build

  # Docker 이미지 빌드
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
      
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 5001:5001 ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        sleep 30
        curl -f http://localhost:5001/health || exit 1
        docker stop test-container

  # Production 배포 (main 브랜치만)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Debug file structure
      run: |
        echo "=== Current directory ==="
        pwd
        echo "=== Files in current directory ==="
        ls -la
        echo "=== Package files ==="
        ls -la package*
        echo "=== Node modules (if exists) ==="
        ls -la node_modules 2>/dev/null || echo "No node_modules found"
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps || npm install --legacy-peer-deps
      
    - name: Build application
      run: npm run build
      
    - name: Create deployment package
      run: |
        mkdir -p deploy
        cp -r dist/ deploy/
        cp package*.json deploy/
        cp Dockerfile deploy/
        cp docker-compose.yml deploy/
        tar -czf deployment.tar.gz -C deploy .
        
    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DIGITALOCEAN_IP }}
        username: ${{ secrets.DIGITALOCEAN_USER }}
        key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
        port: 22
        script: |
          # 배포 디렉토리 준비
          mkdir -p /opt/hqmx-backend
          cd /opt/hqmx-backend
          
          # 기존 컨테이너 중지
          docker-compose down || true
          
          # 백업 생성
          if [ -f docker-compose.yml ]; then
            cp -r . ../hqmx-backend-backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # 환경 변수 설정
          cat > .env << EOF
          NODE_ENV=production
          PORT=5001
          API_URL=https://api.hqmx.net
          CLOUDFLARE_R2_ACCOUNT_ID=${{ secrets.CLOUDFLARE_R2_ACCOUNT_ID }}
          CLOUDFLARE_R2_ACCESS_KEY=${{ secrets.CLOUDFLARE_R2_ACCESS_KEY }}
          CLOUDFLARE_R2_SECRET_KEY=${{ secrets.CLOUDFLARE_R2_SECRET_KEY }}
          CLOUDFLARE_R2_BUCKET=${{ secrets.CLOUDFLARE_R2_BUCKET }}
          CLOUDFLARE_R2_ENDPOINT=${{ secrets.CLOUDFLARE_R2_ENDPOINT }}
          REDIS_URL=redis://redis:6379
          MAX_CONCURRENT_DOWNLOADS=10
          TEMP_DIR=/tmp/hqmx
          EOF
    
    - name: Copy deployment files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DIGITALOCEAN_IP }}
        username: ${{ secrets.DIGITALOCEAN_USER }}
        key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
        source: "deployment.tar.gz"
        target: "/opt/hqmx-backend/"
        
    - name: Extract and start services
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DIGITALOCEAN_IP }}
        username: ${{ secrets.DIGITALOCEAN_USER }}
        key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
        script: |
          cd /opt/hqmx-backend
          
          # 새 파일 추출
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz
          
          # Docker 이미지 빌드 및 시작
          docker-compose build
          docker-compose up -d
          
          # 헬스체크
          sleep 30
          curl -f http://localhost:5001/health || exit 1
          
          # 오래된 Docker 이미지 정리
          docker image prune -f
          
          echo "Deployment completed successfully!"

  # 알림 전송
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Send success notification
      if: needs.deploy-production.result == 'success'
      run: |
        echo "✅ HQMX Backend deployed successfully to production!"
        # 여기에 Slack, Discord, 이메일 등의 알림 설정 추가 가능
        
    - name: Send failure notification
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ HQMX Backend deployment failed!"
        # 여기에 실패 알림 설정 추가 가능